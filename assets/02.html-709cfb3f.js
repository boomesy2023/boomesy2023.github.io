import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r,o as s,c as n,a as e,b as t,d as l,f as d}from"./app-46202b86.js";const c={},i=d('<h1 id="rust-和-java-对比-string-类型" tabindex="-1"><a class="header-anchor" href="#rust-和-java-对比-string-类型" aria-hidden="true">#</a> Rust 和 Java 对比--String 类型</h1><p>引用 Rust 程序设计语言中的一段话：</p><blockquote><blockquote><p>字符串是新晋 Rustacean 们通常会被困住的领域，这是由于三方面理由的结合：Rust 倾向于确保暴露出可能的错误，字符串是比很多开发者所想象的要更为复杂的数据结构，以及 UTF-8。所有这些要素结合起来对于来自其他语言背景的开发者就可能显得很困难了。</p></blockquote></blockquote><p>在学习编程语言的过程中，我们很多时候都会忽略字符串的复杂度，因为往往我们只是利用字符串表达信息罢了，并不会深究。学习 Rust 确实是个困难的过程，尽管已经有了其他语言的基础，Rust 不知道出于什么目的，没有沿用很多传统的概念，而是引入了很多让人感觉奇怪的名词，或者是写法。。。挺难入门的。</p><h2 id="字符串在-java-和-rust-中的区别" tabindex="-1"><a class="header-anchor" href="#字符串在-java-和-rust-中的区别" aria-hidden="true">#</a> 字符串在 Java 和 Rust 中的区别</h2><table><thead><tr><th style="text-align:left;"></th><th style="text-align:left;">Rust</th><th style="text-align:left;">Java</th></tr></thead><tbody><tr><td style="text-align:left;">存储方式</td><td style="text-align:left;">字节集合</td><td style="text-align:left;">Java8：采用 char 数组。<br>Java9 之后：采用 byte 数组，同时使用 coder 标识编码。</td></tr><tr><td style="text-align:left;">声明方式</td><td style="text-align:left;">let s = String::from(&quot;hello world&quot;);<br>let mut s = String::from(&quot;hello world&quot;);<br>let s = &quot;hello world&quot;.to_string();<br>……</td><td style="text-align:left;">String s = &quot;hello world&quot;;<br>String s = new String(&quot;hello world&quot;)<br>……</td></tr><tr><td style="text-align:left;">加号拼接</td><td style="text-align:left;">s = s + &quot; world&quot;;</td><td style="text-align:left;">s = s + &quot; world&quot;;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;"><code>String</code> 的类型是由标准库提供的，而没有写进核心语言部分，<br>它是可增长的、可变的、有所有权的、UTF-8 编码的字符串类型。</td><td style="text-align:left;">字符串是常量；它们的值在创建后不能更改。</td></tr></tbody></table><blockquote><p>Rust 的核心语言中只有一种字符串类型：<code>str</code>，字符串 slice，它通常以被借用的形式出现，<code>&amp;str</code>。Strings 始终是有效的 UTF-8。</p></blockquote><blockquote><p>在将一个字符串对象作为另一个字符串对象的构造函数参数时，并不会完全复制 value 数组内容，⽽是都会指向同一个 value 数组。貌似 Java 和 Rust 都是这样。</p></blockquote><blockquote><p>在 Java 中，String 被声明为 final，因此不可被继承。</p></blockquote>',9),u={href:"https://doc.rust-lang.org/std/string/struct.String.html",target:"_blank",rel:"noopener noreferrer"},h={href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/String.html",target:"_blank",rel:"noopener noreferrer"};function g(f,b){const a=r("ExternalLinkIcon");return s(),n("div",null,[i,e("p",null,[t("字符串的只是绝对没有这么简单，上面只是简单列了一些内容。更多内容可以查看官方文档："),e("a",u,[t("Rust"),l(a)]),t(" 和 "),e("a",h,[t("Java"),l(a)]),t("。")])])}const _=o(c,[["render",g],["__file","02.html.vue"]]);export{_ as default};
