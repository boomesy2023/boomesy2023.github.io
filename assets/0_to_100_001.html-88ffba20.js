import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c as p,a as s,b as n,d as c,f as l}from"./app-46202b86.js";const i={},r=l(`<h1 id="rust-从零开始学习" tabindex="-1"><a class="header-anchor" href="#rust-从零开始学习" aria-hidden="true">#</a> Rust 从零开始学习</h1><h2 id="为什么需要-cargo-cargo-能做什么" tabindex="-1"><a class="header-anchor" href="#为什么需要-cargo-cargo-能做什么" aria-hidden="true">#</a> 为什么需要 Cargo，Cargo 能做什么？</h2><blockquote><p>前言</p></blockquote><p>在 Rust 中，库或可执行程序称为 crate。包是使用 Rust 编译器 <code>rustc</code> 编译的。当开始使用 Rust 时，大多数人遇到的第一个源代码是古老的“hello world”程序的源代码，他们 通过直接调用 rustc 来编译该程序：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ rustc hello.rs
$ ./hello
Hello, world<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请注意，上述命令要求我们明确指定文件名。如果我们直接使用 <code>rustc</code> 编译不同的程序，则需要不同的命令行调用。如果我们需要指定任何特定的编译器标志或包含外部依赖项，那么所需的命令将更加具体（并且详细）。</p><p>此外，大多数重要的程序可能会依赖于外部库，因此也会传递地依赖于它们的依赖项。如果手动完成，获取所有必要依赖项的正确版本并使其保持最新将非常费力且容易出错。</p><p>我们可以通过引入更高级别的“包”抽象并使用包管理器来避免执行上述任务所涉及的手动繁琐工作，而不是仅使用 crates 和 rustc。</p><h3 id="cargo-的作用" tabindex="-1"><a class="header-anchor" href="#cargo-的作用" aria-hidden="true">#</a> Cargo 的作用</h3><p>Cargo 是 Rust 包管理器。它是一个允许 Rust 包声明其各种依赖项并确保您始终获得可重复构建的工具。</p><p>为了实现这一目标，Cargo 做了四件事：</p><ol><li>引入两个元数据文件，其中包含各种包信息;</li><li>获取并构建包的依赖项;</li><li>使用正确的参数调用 <code>rustc</code> 或其他构建工具来构建您的包;</li><li>引入约定，使 Rust 包的使用更加容易。</li></ol><p>在很大程度上，Cargo 标准化了构建给定程序或库所需的命令；这是上述公约的一方面。正如我们稍后展示的，相同的命令可以用于构建不同的工件，无论它们的名称是什么。我们可以不直接调用 <code>rustc</code>，而是调用一些通用的东西，例如 <code>cargo build</code>，并让 Cargo 负责构建正确的 rustc 调用。此外，Cargo 会自动从注册表中获取我们为工件定义的任何依赖项，并根据需要将它们合并到我们的构建中。</p><h3 id="cargo-toml-vs-cargo-lock" tabindex="-1"><a class="header-anchor" href="#cargo-toml-vs-cargo-lock" aria-hidden="true">#</a> Cargo.toml vs Cargo.lock</h3><p><code>Cargo.toml</code> 和 <code>Cargo.lock</code> 有两个不同的用途。在讨论它们之前，先做一个总结：</p><ul><li><code>Cargo.toml</code> 是关于广义上描述包的依赖关系，并且由自己编写。</li><li><code>Cargo.lock</code> 包含有关包的依赖项的准确信息。它由 Cargo 维护，不应手动编辑。</li></ul><p>更深入的讲：</p><p><code>Cargo.toml</code> 是一个清单文件，我们可以在其中指定有关包的一堆不同元数据。例如，我们可以说我们依赖于另一个包：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;hello_world&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">git</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://github.com/rust-lang/regex.git&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该包对正则表达式库有一个依赖项。我们已经在本例中声明过，我们依赖于 GitHub 上的特定 Git 存储库。由于我们没有指定任何其他信息，Cargo 假设我们打算使用默认分支上的最新提交来构建我们的包。</p><p>听起来不错？好吧，有一个问题：如果你今天构建这个包，然后向别人发送一份副本，而别人明天构建这个包，则可能会发生一些不好的事情。同时可能会有更多对正则表达式的提交，别人的构建将包含新的提交，而你的则不会。因此，我们会得到不同的版本。这会很糟糕，因为我们想要可重复的构建。</p><p>我们可以通过在 <code>Cargo.toml</code> 中定义特定的 rev 值来解决这个问题，这样 Cargo 就可以准确地知道在构建包时要使用哪个版本：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">git</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://github.com/rust-lang/regex.git&quot;</span><span class="token punctuation">,</span> <span class="token key property">rev</span> <span class="token punctuation">=</span> <span class="token string">&quot;9f9f693&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在我们的构建将是相同的。但有一个很大的缺点：现在我们每次想要更新库时都必须手动考虑 SHA-1。这既乏味又容易出错。</p><p>引入 <code>Cargo.lock</code>。由于它的存在，我们不需要手动跟踪确切的修订：Cargo 会为我们做这件事。当我们有这样的清单时：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;hello_world&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>

<span class="token punctuation">[</span><span class="token table class-name">dependencies</span><span class="token punctuation">]</span>
<span class="token key property">regex</span> <span class="token punctuation">=</span> <span class="token punctuation">{</span> <span class="token key property">git</span> <span class="token punctuation">=</span> <span class="token string">&quot;https://github.com/rust-lang/regex.git&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们第一次构建时，Cargo 将获取最新的提交并将该信息写入我们的 <code>Cargo.lock</code> 中。该文件将如下所示：</p><div class="language-toml line-numbers-mode" data-ext="toml"><pre class="language-toml"><code><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;hello_world&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;0.1.0&quot;</span>
<span class="token key property">dependencies</span> <span class="token punctuation">=</span> <span class="token punctuation">[</span>
 <span class="token string">&quot;regex 1.5.0 (git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831)&quot;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>

<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token table class-name">package</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token key property">name</span> <span class="token punctuation">=</span> <span class="token string">&quot;regex&quot;</span>
<span class="token key property">version</span> <span class="token punctuation">=</span> <span class="token string">&quot;1.5.0&quot;</span>
<span class="token key property">source</span> <span class="token punctuation">=</span> <span class="token string">&quot;git+https://github.com/rust-lang/regex.git#9f9f693768c584971a4d53bc3c586c33ed3a6831&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这里有更多信息，包括我们用来构建的确切版本。现在，当将包裹交给其他人时，他们将使用完全相同的 SHA，即使我们没有在 <code>Cargo.toml</code> 中指定它。</p><p>当我们准备好选择新版本的库时，Cargo 可以重新计算依赖项并为我们更新内容：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>$ <span class="token function">cargo</span> update         <span class="token comment"># 更新所有依赖</span>
$ <span class="token function">cargo</span> update regex   <span class="token comment"># 仅仅更新 “regex”</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,31),u=s("code",null,"Cargo.lock",-1),d=s("code",null,"cargo update",-1),k={href:"https://doc.rust-lang.org/cargo/reference/pkgid-spec.html",target:"_blank",rel:"noopener noreferrer"};function g(m,v){const a=t("ExternalLinkIcon");return o(),p("div",null,[r,s("p",null,[n("这将写出一个带有新版本信息的新 "),u,n("。请注意，"),d,n("的参数实际上是一个"),s("a",k,[n("包 ID 规范"),c(a)]),n("，而 regex 只是一个简短的规范。")])])}const y=e(i,[["render",g],["__file","0_to_100_001.html.vue"]]);export{y as default};
