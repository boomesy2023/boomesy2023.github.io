import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as e,c as d,f as a}from"./app-46202b86.js";const r={},i=a('<h1 id="java-基础-访问修饰符" tabindex="-1"><a class="header-anchor" href="#java-基础-访问修饰符" aria-hidden="true">#</a> Java_基础-访问修饰符</h1><h2 id="访问权限" tabindex="-1"><a class="header-anchor" href="#访问权限" aria-hidden="true">#</a> 访问权限</h2><p>Java 中有三种访问权限修饰符：private、protected、public，如果不加访问修饰符，表示包级别可访问。</p><p>访问修饰符可以加在类或类成员（字段和方法）上。</p><h3 id="private" tabindex="-1"><a class="header-anchor" href="#private" aria-hidden="true">#</a> private</h3><p>在同一类内可见。可以作用在变量、方法上，不能修饰外部类。</p><h3 id="public" tabindex="-1"><a class="header-anchor" href="#public" aria-hidden="true">#</a> public</h3><p>对所有类可见。可以作用在类、变量、方法上。</p><h3 id="protected" tabindex="-1"><a class="header-anchor" href="#protected" aria-hidden="true">#</a> protected</h3><p>对同一包内的类和所有子类可见。可以作用在变量、方法，不能修饰外部类。</p><p>访问权限说明表：</p><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>同一包内（子孙类）</th><th>不同包（子孙类）</th><th>其他包</th></tr></thead><tbody><tr><td>public</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>Y/N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr><tr><td>默认</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr></tbody></table><h3 id="protected-详解" tabindex="-1"><a class="header-anchor" href="#protected-详解" aria-hidden="true">#</a> protected 详解</h3><blockquote><p><em>protected 是最难理解的一种 Java 类成员访问权限修饰词</em>,很多介绍 Java 语言的书籍(包括《Java 编程思想》)都对 protected 介绍的比较的简单，基本都是一句话，就是: <strong>被 protected 修饰的成员对于本包和其子类可见</strong>。</p></blockquote><p>protected 的可见性在于两点：</p><ol><li>基类的 protected 成员是包内可见的，并且对子类可见；</li><li>若子类与基类不在同一包内，那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的 protected 方法。</li></ol><h3 id="访问控制和继承" tabindex="-1"><a class="header-anchor" href="#访问控制和继承" aria-hidden="true">#</a> 访问控制和继承</h3><ul><li>父类中声明为 public 的方法在子类中也必须为 public。</li><li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li><li>父类中声明为 private 的方法，不能被子类继承。</li></ul>',18),h=[i];function c(p,o){return e(),d("div",null,h)}const s=t(r,[["render",c],["__file","01.html.vue"]]);export{s as default};
