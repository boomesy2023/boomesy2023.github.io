import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as a,f as s}from"./app-46202b86.js";const e={},p=s(`<h1 id="java-基础-格式化输出" tabindex="-1"><a class="header-anchor" href="#java-基础-格式化输出" aria-hidden="true">#</a> Java_基础-格式化输出</h1><h2 id="java-string-format" tabindex="-1"><a class="header-anchor" href="#java-string-format" aria-hidden="true">#</a> Java String format()</h2><p>Java String format() 方法通过给定的语言环境，格式和参数返回格式化的字符串。</p><p>如果您未在 String.format()方法中指定语言环境，则它通过调用 locale.getDefault()方法使用默认语言环境。</p><p>Java 语言的 format() 方法就像 c 语言中的 sprintf()函数，和 Java 语言的 printf()方法一样。</p><h3 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法：</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;sonoo&quot;</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sf1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;name is %s&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sf2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;value is %f&quot;</span><span class="token punctuation">,</span> <span class="token number">32.33434</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> sf3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&quot;value is %32.12f&quot;</span><span class="token punctuation">,</span> <span class="token number">32.33434</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//returns 12 char fractional part filling with 0</span>

<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sf1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sf2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sf3<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
name is sonoo
value is <span class="token number">32.334340</span>
value is                  <span class="token number">32.334340000000</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="格式化符号说明" tabindex="-1"><a class="header-anchor" href="#格式化符号说明" aria-hidden="true">#</a> 格式化符号说明</h3><table><thead><tr><th style="text-align:center;">格式化符号</th><th>数据类型</th><th>输出</th></tr></thead><tbody><tr><td style="text-align:center;">%a</td><td>浮点数（BigDecimal 除外）</td><td>返回浮点数的十六进制输出。</td></tr><tr><td style="text-align:center;">%b</td><td>任意类型</td><td>&quot;true&quot; if non-null, &quot;false&quot; if null</td></tr><tr><td style="text-align:center;">%c</td><td>字符</td><td>Unicode 字符</td></tr><tr><td style="text-align:center;">%d</td><td>整数 (byte, short, int, long, bigint)</td><td>十进制整数</td></tr><tr><td style="text-align:center;">%e</td><td>浮点数</td><td>科学计数法中的十进制数</td></tr><tr><td style="text-align:center;">%f</td><td>浮点数</td><td>十进制数字</td></tr><tr><td style="text-align:center;">%g</td><td>浮点数</td><td>十进制数，可能采用科学记数法，具体取决于精度和值。</td></tr><tr><td style="text-align:center;">%h</td><td>任意类型</td><td>来自 hashCode() 方法的十六进制字符串值。</td></tr><tr><td style="text-align:center;">%n</td><td></td><td>输出换行</td></tr><tr><td style="text-align:center;">%o</td><td>整数(byte, short, int, long, bigint)</td><td>八进制</td></tr><tr><td style="text-align:center;">%s</td><td>任意类型</td><td>字符串</td></tr><tr><td style="text-align:center;">%t</td><td>日期/时间 (long, Calendar, Date and TemporalAccessor)</td><td>%t 是日期/时间转换的前缀。之后需要更多格式化标志。请参阅下面的日期/时间转换。</td></tr><tr><td style="text-align:center;">%x</td><td>整数(byte, short, int, long, bigint)</td><td>十六进制字符串</td></tr></tbody></table><blockquote><p>日期格式化输出符号说明</p><table><thead><tr><th>转 换 符</th><th>说 明</th><th>示 例</th></tr></thead><tbody><tr><td>c</td><td>包括全部日期和时间信息</td><td>星期六 十月 27 14:21:20 CST 2007</td></tr><tr><td>F</td><td>“年-月-日”格式</td><td>2007-10-27</td></tr><tr><td>D</td><td>“月/日/年”格式</td><td>10/27/07</td></tr><tr><td>r</td><td>“HH:MM:SS PM”格式（12 时制）</td><td>02:25:51 下午</td></tr><tr><td>T</td><td>“HH:MM:SS”格式（24 时制）</td><td>14:28:16</td></tr><tr><td>R</td><td>“HH:MM”格式（24 时制）</td><td>14:28</td></tr></tbody></table></blockquote><p>示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%tF %tT&quot;</span><span class="token punctuation">,</span> now<span class="token punctuation">,</span> now<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//输出</span>
<span class="token number">2022</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">23</span> <span class="token number">10</span><span class="token operator">:</span><span class="token number">54</span><span class="token operator">:</span><span class="token number">32</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),o=[p];function c(l,d){return t(),a("div",null,o)}const u=n(e,[["render",c],["__file","02.html.vue"]]);export{u as default};
